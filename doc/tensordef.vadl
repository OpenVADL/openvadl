using Dim_1_a = Bits<16>
using Dim_2_a = Dim_1_a<4>
using Dim_3_a = Dim_2_a<2>
using Dim_3_b = Bits<2><4><16>   // equivalent to Dim_3_a

constant d2 : Dim_2_a = (3, 2, 1, 0)   // specified with highest index first
constant d3 : Dim_3_a = ((7, 6, 5, 4), (3, 2, 1, 0)) 

constant a = d2(3)               // should be 3 as Dim_1_a (Bits<16>)
constant b = d2(3)(15)           // should be 0 as Bits<1>
constant c = d3(0)               // should be (3, 2, 1, 0) as Dim_2_a 
constant d = d3(0)(3)            // should be 3 as Dim_1_a (Bits<16>) 
constant e = d3(0)(3)(15)        // should be  0 as Bits<1>
constant f = let x = d3(0) as Bits<64> in x(15..0)  // should be 0 d3(0)(0)
constant g = let x = d3(0) as Bits<64> in x(63..48) // should be 3 d3(0)(3)
constant h = let x = d3(1) as Bits<64> in x(63..48) // should be 7 d3(1)(3)

constant i = 0xfedc'da98'7654'3210  // Bits<64> value
//            |63                0| // bit positions
//            |j(3)|    |    |j(0)| // matrix elements
constant j = i as Dim_2_a

instruction set architecture test = {
register file  X : Bits<2> -> Dim_1_a  // 4 registers with Bit<16>
alias register Y : Dim_2_a  = X        // also 4 registers with Bit <16>
alias register Z : Bits<64> = X        // a single 64 bit register

format F : Bits<8> = {opcode : Bits<8>}
instruction instr1 : F =
    X(3) := Y(3)       // are identical registers
instruction instr2 : F =
    X(3) := Z(63..48)  // are the identical bits
}