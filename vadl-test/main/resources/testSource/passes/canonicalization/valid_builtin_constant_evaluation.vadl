/// This file holds all tests for built-in constant evaluation
///
/// We use Apache Velocity macros to provide a concise test definition.
/// The `test` macro is used to define two functions, one holding the test and one holding the
/// expected solution. The `ntest` normalizes tests, by generating a name from the arguments and types,
/// and passes the result to the `test` macro.
/// Each tested built-in has its own macros to define the body for the test.


/// VARIABLE SHORTCUTS
#set($b1 = "Bool")
#set($u1 = "UInt<1>")
#set($s1 = "SInt<1>")
#set($u2 = "UInt<2>")
#set($s2 = "SInt<2>")
#set($b2 = "Bits<2>")
#set($u3 = "UInt<3>")
#set($s3 = "SInt<3>")
#set($b3 = "Bits<3>")
#set($s4 = "SInt<4>")
#set($u4 = "UInt<4>")
#set($b4 = "Bits<4>")
#set($s8 = "SInt<8>")
#set($u8 = "UInt<8>")
#set($b8 = "Bits<8>")
#set($s16 = "SInt<16>")
#set($u16 = "UInt<16>")
#set($b16 = "Bits<16>")
#set($u32 = "UInt<32>")
#set($s32 = "SInt<32>")
#set($b32 = "Bits<32>")
#set($u64 = "UInt<64>")
#set($s64 = "SInt<64>")
#set($b64 = "Bits<64>")


/////////////// ARITHMETIC OPERATIONS /////////////////

// VADL::add

#macro(add $a, $at, $b, $bt, $result, $resultType)
#ntest("add", {$a: $at, $b: $bt}, "VADL::add($a as $at, $b as $bt)", $result, $resultType )
#end

#add(2, $s4, 2, $s4, 4, $s4)
#add(2, $s4, 3, $s4, 5, $s4)
#add(-2, $s4, 3, $s4, 1, $s4)
#add(7, $s4, 1, $s4, -8, $s4)
#add(-7, $s4, -2, $s4, 7, $s4)
#add(1, $u4, 4, $u4, 5, $u4)
#add(7, $u4, 1, $u4, 8, $u4)
#add(8, $u4, 8, $u4, 0, $u4)
#add(80, $u8, 80, $u8, 160, $u8)
#add(80, $s8, 80, $s8, -96, $s8)
#add(80, $s8, -48, $s8, 32, $s8)
#add(8, $u4, 15, $u4, 7, $u4)
#add(15, $u4, 15, $u4, 14, $u4)


// VADL::sub

#macro(sub $a, $at, $b, $bt, $result, $resultType)
#ntest("sub", {$a: $at, $b: $bt}, "VADL::sub($a as $at, $b as $bt)", $result, $resultType )
#end

#sub(-2, $s4, 3, $s4, -5, $s4)
#sub(80, $u8, 176, $u8, 160, $u8)
#sub(2, $s3, -4, $s3, -2, $s3)
#sub(2, $b3, 4, $b3, 6, $b3)
#sub(-2, $s3, -4, $s3, 2, $s3)
#sub(0, $s4, 1, $s4, -1, $s4)
#sub(-8, $s4, 1, $s4, 7, $s4)
#sub(15, $u4, 1, $u4, 14, $u4)
#sub(8, $u4, 8, $u4, 0, $u4)
#sub(0, $u4, 8, $u4, 8, $u4)
#sub(4294967295, $u32, 4294967295, $u32, 0, $u32)
#sub(-1, $s32, -1, $s32, 0, $s32)
#sub(0, $u32, 1, $u32, 4294967295, $u32)
#sub(0, $s32, 1, $s32, -1, $s32)
#sub(0, $u32, 4294967295, $u32, 1, $u32)
#sub(2147483648, $u32, 1, $u32, 2147483647, $u32)
#sub(-2147483648, $s32, 1, $s32, 2147483647, $s32)
#sub(1, $u32, 2147483648, $u32, 2147483649, $u32)
#sub(0, $u32, 0, $u32, 0, $u32)


// VADL::mul
// NOTE: This will change with the new frontend (the mul semantics are different)
// In fact, this VADL::mul will generate a umull or smull call on the VIAM
// (https://ea.complang.tuwien.ac.at/vadl/vadl/issues/1647)
// You will have to replace the tests to fit the OpenVADL semantics

#macro(mul $a, $at, $b, $bt, $result, $resultType)
#ntest("mul", {$a: $at, $b: $bt}, "VADL::mul($a as $at, $b as $bt)", $result, $resultType )
#end

#mul(4294967295, $u32, 2, $u32, 8589934590, $u64)
#mul(-1, $s32, 2, $s32, -2, $s64)
#mul(65535, $u16, 65535, $u16, 4294836225, $u32)
#mul(-1, $s16, -1, $s16, 1, $s32)
#mul(4, $u16, 3, $u16, 12, $u32)


// VADL::div

#macro(div $a, $at, $b, $bt, $result, $resultType)
#ntest("div", {$a: $at, $b: $bt}, "VADL::div($a as $at, $b as $bt)", $result, $resultType )
#end

#div(-1, $s32, 2, $s32, 0, $s32)
#div(4294967295, $u32, 2, $u32, 2147483647, $u32)
#div(-1, $s32, -2147483648, $s32, 0, $s32)
#div(4294967295, $u32, 2147483648, $u32, 1, $u32)


// VADL::neg

#macro(neg $a, $at, $result, $resultType)
#ntest("neg", {$a: $at}, "VADL::neg($a as $at)", $result, $resultType )
#end

#neg(8, $u4, 8, $u4)
#neg(8, $b4, 8, $b4)
#neg(0, $b4, 0, $b4)
#neg(1, $b4, 15, $b4)
#neg(15, $b4, 1, $b4)
#neg(-8, $s4, -8, $s4)
#neg(-1, $s4, 1, $s4)


/////////////// LOGICAL OPERATIONS /////////////////


// VADL::and

#macro(and_ $a, $at, $b, $bt, $result, $resultType)
#ntest("and", {$a: $at, $b: $bt}, "VADL::and($a as $at, $b as $bt)", $result, $resultType )
#end

#and_(0, $u4, 0, $u4, 0, $u4)
#and_(15, $u4, 0, $u4, 0, $u4)
#and_(0, $u4, 15, $u4, 0, $u4)
#and_(15, $u4, 15, $u4, 15, $u4)
#and_(12, $u4, 5, $u4, 4, $u4)
#and_(0, $b1, 0, $b1, 0, $b1)
#and_(0, $b1, 1, $b1, 0, $b1)
#and_(1, $b1, 1, $b1, 1, $b1)


// VADL::and

#macro(not_ $a, $at, $result, $resultType)
#ntest("not", {$a: $at}, "VADL::not($a as $at)", $result, $resultType )
#end

#not_(0, $u4, 15, $u4)
#not_(15, $u4, 0, $u4)
#not_(10, $u4, 5, $u4)
#not_(1, $u1, 0, $u1)
#not_(0, $u1, 1, $u1)
#not_(-1, $s1, 0, $s1)
#not_(0, $s1, -1, $s1)
#not_(0, $b1, 1, $b1)
#not_(1, $b1, 0, $b1)





///////// TEST MACROS Implementation ///////////

## Normalizes the test name. The $opes parameter is a map of {value: type}
#macro(ntest $op_name, $opes, $expr, $result, $resultType)
#set($testName = $op_name)
## Normalize all strings (so no minus (-) or <> occurs)
#foreach($key in $opes.keySet())
  #set($value = $opes.get($key).replace('<', '').replace('>', ''))
  #set($cleanKey = $key.toString())
  #if($cleanKey.startsWith("-"))
   #set($cleanKey = "minus" + $cleanKey.substring(1))
  #end
  #set($testName = "${testName}_${cleanKey}_${value}")
#end
##
#set($cleanRes = $result.toString())
#if($cleanRes.startsWith("-"))
 #set($cleanRes = "minus" + $cleanRes.substring(1))
#end
#set($retTypeStr = $resultType.toString().replace('<', '').replace('>', ''))
#set($testName = "${testName}_${cleanRes}_${retTypeStr}" )
##
#test($testName, $expr, $result, $resultType)
#end


#macro(test $name, $expr, $result, $type)
function exercise_$name -> $type = $expr
function solution_$name -> $type = $result

#end


