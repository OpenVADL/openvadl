#ifndef LLVM_LIB_TARGET_[(${namespace})]_[(${namespace})]ASMPRINTER_H
#define LLVM_LIB_TARGET_[(${namespace})]_[(${namespace})]ASMPRINTER_H

#include "[(${namespace})]TargetMachine.h"
#include "[(${namespace})]MCInstLower.h"
#include "MCTargetDesc/[(${namespace})]MCInstExpander.h"
#include "[(${namespace})]RegisterInfo.h"
#include "llvm/CodeGen/AsmPrinter.h"
#include "llvm/CodeGen/MachineInstr.h"
#include "llvm/MC/MCStreamer.h"

#include <vector>

using namespace llvm;

namespace // anonymous namespace
{
    class [(${namespace})]AsmPrinter : public AsmPrinter
    {
        public:
            explicit [(${namespace})]AsmPrinter
                ( TargetMachine &TM
                , std::unique_ptr<MCStreamer> Streamer
                )
                : AsmPrinter( TM, std::move( Streamer ) )
                , MCInstLowering( *this )
                , MCInstExpander( this->OutContext )
            {}

            StringRef getPassName() const override;
            void emitToStreamer(MCStreamer &S, const MCInst &Inst);
            void emitInstruction(const MachineInstr *MI) override;

            // Wrapper needed for tablegen generated pseudo lowering.
            bool lowerOperand(const MachineOperand &MO, MCOperand &MCOp) const;

            // == autogenerated and in [(${namespace})]GenMCPseudoLowering.inc ==
            bool emitPseudoExpansionLowering(MCStreamer &OutStreamer, const MachineInstr *MI);

            void emitStartOfAsmFile( Module& module ) override;

        private:
            [(${namespace})]MCInstLower MCInstLowering;
            [(${namespace})]MCInstExpander MCInstExpander;
    };
}

#endif // LLVM_LIB_TARGET_[(${namespace})]_[(${namespace})]ASMPRINTER_H