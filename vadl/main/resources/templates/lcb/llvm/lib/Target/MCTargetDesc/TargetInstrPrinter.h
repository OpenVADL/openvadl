#ifndef LLVM_LIB_TARGET_[(${namespace})]_MCTARGETDESC_[(${namespace})]INSTPRINTER_H
#define LLVM_LIB_TARGET_[(${namespace})]_MCTARGETDESC_[(${namespace})]INSTPRINTER_H

#include "AsmUtils.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/MC/MCInstPrinter.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCExpr.h"
#include "llvm/MC/MCRegister.h"
#include <string>

namespace llvm
{
    class [(${namespace})]InstPrinter : public MCInstPrinter
    {
        virtual void anchor();

    public:
        [(${namespace})] InstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII, const MCRegisterInfo &MRI)
            : MCInstPrinter(MAI, MII, MRI)
        {
        }

        void printInst(const MCInst *MI, uint64_t Address, StringRef Annot, const MCSubtargetInfo &STI, raw_ostream &O) override;

        void printRegName(raw_ostream & OS, MCRegister RegNo) const override;

        MCOperand adjustImmediateOp(const MCInst *MI, unsigned OpIndex) const;

        [#th:block th:each="register, iterStat : ${systemRegisters}" ]
            void print[(${register.name})]SystemRegister
                    ( const MCInst *MI
                    , unsigned OpNo
                    , raw_ostream &O
                    );
        [/th:block]

        ////
        // Autogenerated by tblgen.
        ////
        std::pair<const char *, uint64_t>
        getMnemonic(const MCInst *MI) override;
        void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &OS);
        static const char *getRegisterName(MCRegister Reg);

    private:
        std::string instToString(const MCInst *MI, uint64_t Address) const;

        [#th:block th:each="registerClass, iterStat : ${registerClasses}" ]
        std::string getRegisterNameFrom[(${registerClass.simpleName})]ByIndex(unsigned RegIndex) const
        {
            return AsmUtils::getRegisterNameFrom[(${registerClass.simpleName})]ByIndex(RegIndex);
        }
        [/th:block]
    };
}

#endif // LLVM_LIB_TARGET_[(${namespace})]_MCTARGETDESC_[(${namespace})]INSTPRINTER_H