// SPDX-FileCopyrightText : Â© 2025 TU Wien <vadl@tuwien.ac.at>
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package vadl.cppCodeGen.common;

import static vadl.utils.GraphUtils.getSingleNode;

import vadl.cppCodeGen.AbstractRelocationCodeGenerator;
import vadl.cppCodeGen.CppTypeMap;
import vadl.cppCodeGen.context.CGenContext;
import vadl.cppCodeGen.context.CNodeContext;
import vadl.cppCodeGen.model.GcbImmediateExtractionCppFunction;
import vadl.gcb.passes.relocation.model.HasRelocationComputationAndUpdate;
import vadl.javaannotations.DispatchFor;
import vadl.viam.graph.Node;
import vadl.viam.graph.control.ReturnNode;
import vadl.viam.graph.dependency.ExpressionNode;
import vadl.viam.graph.dependency.FuncParamNode;

/**
 * Produce a pure function that generates relocations.
 */
@DispatchFor(
    value = ExpressionNode.class,
    context = CNodeContext.class,
    include = "vadl.cppCodeGen.model.nodes"
)
public class ValueRelocationFunctionCodeGenerator extends AbstractRelocationCodeGenerator {
  protected final String functionName;
  protected final Options options;
  protected final CNodeContext context;

  /**
   * Options for the function which is generated by the code
   * generator.
   */
  public record Options(boolean isConst, boolean isStatic) {

  }

  /**
   * Creates a new pure function code generator for the specified function.
   */
  public ValueRelocationFunctionCodeGenerator(
      HasRelocationComputationAndUpdate relocation,
      GcbImmediateExtractionCppFunction gcbValueRelocationCppFunction) {
    super(gcbValueRelocationCppFunction);
    this.functionName =
        relocation.identifier().append(gcbValueRelocationCppFunction.identifier.tail().parts())
            .lower();
    this.options = new Options(false, false);
    this.context = new CNodeContext(
        builder::append,
        (ctx, node)
            -> ValueRelocationFunctionCodeGeneratorDispatcher.dispatch(this, ctx,
            (ExpressionNode) node)
    );
  }

  /**
   * Creates a new pure function code generator for the specified function.
   */
  public ValueRelocationFunctionCodeGenerator(
      HasRelocationComputationAndUpdate relocation,
      GcbImmediateExtractionCppFunction gcbValueRelocationCppFunction,
      Options options) {
    super(gcbValueRelocationCppFunction);
    this.functionName =
        relocation.identifier().append(gcbValueRelocationCppFunction.identifier.tail().parts())
            .lower();
    this.options = options;
    this.context = new CNodeContext(
        builder::append,
        (ctx, node)
            -> ValueRelocationFunctionCodeGeneratorDispatcher.dispatch(this, ctx,
            (ExpressionNode) node)
    );
  }

  @Override
  public void handle(CGenContext<Node> ctx, FuncParamNode toHandle) {
    ctx.wr(toHandle.parameter().simpleName());
  }

  @Override
  public String genFunctionSignature() {
    var returnType = function.returnType().asDataType().fittingCppType();

    function.ensure(returnType != null, "No fitting Cpp type found for return type %s", returnType);
    function.ensure(function.behavior().isPureFunction(), "Function is not pure.");

    var isConst = options.isConst();
    var isStatic = options.isStatic();

    return (isStatic ? "static " : "") + CppTypeMap.getCppTypeNameByVadlType(returnType)
        + " %s(%s)".formatted(functionName, genFunctionParameters(function.parameters()))
        + (isConst ? " const" : "");
  }

  @Override
  public CNodeContext context() {
    return context;
  }

  @Override
  public String genFunctionName() {
    return functionName;
  }
}
