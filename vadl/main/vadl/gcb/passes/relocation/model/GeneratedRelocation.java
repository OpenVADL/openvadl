package vadl.gcb.passes.relocation.model;

import vadl.cppCodeGen.model.CppFunction;
import vadl.cppCodeGen.model.VariantKind;
import vadl.cppCodeGen.passes.typeNormalization.CppTypeNormalizationPass;
import vadl.utils.SourceLocation;
import vadl.viam.Format;
import vadl.viam.Identifier;
import vadl.viam.Parameter;
import vadl.viam.Relocation;
import vadl.viam.graph.control.ReturnNode;
import vadl.viam.graph.dependency.FuncParamNode;

/**
 * {@link GeneratedRelocation} are relocations which were
 * generated by the vadl compiler.
 */
public class GeneratedRelocation extends CompilerRelocation implements RelocationLowerable {
  // This is the function which computes the value for the
  // relocation.
  protected final CppFunction valueRelocation;
  // This is the function which updates the value in the format.
  protected final CppFunction fieldUpdateFunction;

  public static GeneratedRelocation create(Kind kind,
                                           Format format,
                                           Format.Field field,
                                           CppFunction fieldUpdateFunction,
                                           VariantKind variantKindRef) {
    var parameter = new Parameter(new Identifier("input", SourceLocation.INVALID_SOURCE_LOCATION),
        format.type());
    var identifier = generateName(format, field, kind);
    var relocation = new Relocation(identifier, new Parameter[] {parameter}, format.type());
    var valueRelocation = CppTypeNormalizationPass.makeTypesCppConform(relocation);
    valueRelocation.behavior().addWithInputs(new ReturnNode(new FuncParamNode(parameter)));
    return new GeneratedRelocation(kind, format, field,
        relocation,
        valueRelocation,
        fieldUpdateFunction,
        variantKindRef);
  }

  private GeneratedRelocation(Kind kind, Format format, Format.Field field,
                              Relocation relocationRef,
                              CppFunction valueRelocation, CppFunction fieldUpdateFunction,
                              VariantKind variantKindRef) {
    super(kind, format, field, relocationRef, variantKindRef);
    this.valueRelocation = valueRelocation;
    this.fieldUpdateFunction = fieldUpdateFunction;
  }

  private static Identifier generateName(Format format, Format.Field imm, Kind kind) {
    return format.identifier.append(kind.name(), imm.identifier.simpleName());
  }

  @Override
  public CppFunction valueRelocation() {
    return valueRelocation;
  }

  @Override
  public CppFunction fieldUpdateFunction() {
    return fieldUpdateFunction;
  }

  @Override
  public VariantKind variantKind() {
    return variantKindRef;
  }
}
