// SPDX-FileCopyrightText : Â© 2025 TU Wien <vadl@tuwien.ac.at>
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package vadl.iss.template.target;

import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.mapping;
import static java.util.stream.Collectors.toList;

import java.util.List;
import java.util.Map;
import vadl.configuration.GeneralConfiguration;
import vadl.configuration.IssConfiguration;
import vadl.iss.codegen.IssTranslateCodeGenerator;
import vadl.pass.PassName;
import vadl.pass.PassResults;
import vadl.template.AbstractMultiTemplateRenderingPass;
import vadl.viam.Specification;

/**
 * Emits all translation functions of instructions in
 * {@code target/<gen-arch>/insn_trans/trans_<isa>.c.inc}.
 * So instructions are grouped by their ISA definitions and emitted to different files.
 * Those files are then included by the {@code translate.c}, which is generated by the
 * {@link EmitIssTranslateCPass}
 */
public class EmitIssInsnTransCIncPass extends AbstractMultiTemplateRenderingPass {

  public EmitIssInsnTransCIncPass(GeneralConfiguration configuration) {
    super(configuration, "iss");
  }

  @Override
  public PassName getName() {
    return PassName.of("Emit ISS Insn Translation Functions");
  }

  @Override
  protected String getTemplatePath() {
    return "iss/target/gen-arch/insn_trans/trans_isa.c.inc";
  }

  @Override
  public IssConfiguration configuration() {
    return (IssConfiguration) super.configuration();
  }

  private String outPath(String isaScope) {
    return "target/" + configuration().targetName().toLowerCase() + "/insn_trans/trans_"
        + isaScope + ".c.inc";
  }

  @Override
  protected List<RenderInput> createRenderInputs(PassResults passResults,
                                                 Specification specification) {
    return genTranslateFunctions(specification).entrySet().stream()
        .map(e -> {
          var isaScope = e.getKey();
          var transFunctions = e.getValue();

          return new RenderInput(
              outPath(isaScope),
              Map.of(
                  "translate_functions", transFunctions
              )
          );
        }).toList();
  }


  private Map<String, List<String>> genTranslateFunctions(Specification specification) {
    return specification.isa().get().ownInstructions().stream()
        .collect(groupingBy(
            // get ISA scope name
            instr -> instr.identifier.parts()[instr.identifier.parts().length - 2].toLowerCase(),
            // map instructions to translation functions
            mapping(
                instr -> IssTranslateCodeGenerator.fetch(instr, configuration()),
                toList())
        ));
  }

}
