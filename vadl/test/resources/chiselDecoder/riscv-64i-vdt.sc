//> using scala "2.13.12"
//> using dep "org.chipsalliance::chisel:6.6.0"
//> using plugin "org.chipsalliance:::chisel-plugin:6.6.0"
//> using options "-unchecked", "-deprecation", "-language:reflectiveCalls", "-feature", "-Xcheckinit", "-Xfatal-warnings", "-Ywarn-dead-code", "-Ywarn-unused", "-Ymacro-annotations"


import _root_.circt.stage.ChiselStage

import chisel3._
import chisel3.util.BitPat

class InstructionDecoder extends Module {
  val input = IO(Input(UInt(32.W)))
  val output = IO(Output(UInt(6.W)))

  when (input === BitPat("b0110111")) {
    output := 1.U // lui
  }.elsewhen (input === BitPat("b0111011")) {
    when (input === BitPat("b0100000??????????000????????????")) {
      output := 47.U // subw
    }.elsewhen (input === BitPat("b0000000??????????001????????????")) {
      output := 46.U // sllw
    }.elsewhen (input === BitPat("b0000000??????????101????????????")) {
      output := 48.U // srlw
    }.elsewhen (input === BitPat("b0000000??????????000????????????")) {
      output := 49.U // addw
    }.elsewhen (input === BitPat("b0100000??????????101????????????")) {
      output := 50.U // sraw
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b0011011")) {
    when (input === BitPat("b000????????????")) {
      output := 40.U // addiw
    }.elsewhen (input === BitPat("b101????????????")) {
      when (input === BitPat("b0100000?????????????????????????")) {
        output := 42.U // sraiw
      }.elsewhen (input === BitPat("b0000000?????????????????????????")) {
        output := 41.U // srliw
      }.otherwise {
        output := 0.U // invalid
      }
    }.elsewhen (input === BitPat("b001????????????")) {
      when (input === BitPat("b0000000?????????????????????????")) {
        output := 43.U // slliw
      }.otherwise {
        output := 0.U // invalid
      }
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b0000011")) {
    when (input === BitPat("b010????????????")) {
      output := 20.U // lw
    }.elsewhen (input === BitPat("b100????????????")) {
      output := 23.U // lbu
    }.elsewhen (input === BitPat("b110????????????")) {
      output := 24.U // lwu
    }.elsewhen (input === BitPat("b000????????????")) {
      output := 21.U // lb
    }.elsewhen (input === BitPat("b101????????????")) {
      output := 25.U // lhu
    }.elsewhen (input === BitPat("b011????????????")) {
      output := 22.U // ld
    }.elsewhen (input === BitPat("b001????????????")) {
      output := 26.U // lh
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b1100011")) {
    when (input === BitPat("b000????????????")) {
      output := 4.U // beq
    }.elsewhen (input === BitPat("b001????????????")) {
      output := 6.U // bne
    }.elsewhen (input === BitPat("b111????????????")) {
      output := 5.U // bgeu
    }.elsewhen (input === BitPat("b101????????????")) {
      output := 7.U // bge
    }.elsewhen (input === BitPat("b110????????????")) {
      output := 9.U // bltu
    }.elsewhen (input === BitPat("b100????????????")) {
      output := 8.U // blt
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b1101111")) {
    output := 44.U // jal
  }.elsewhen (input === BitPat("b0110011")) {
    when (input === BitPat("b0000000??????????000????????????")) {
      output := 19.U // add
    }.elsewhen (input === BitPat("b0000000??????????011????????????")) {
      output := 14.U // sltu
    }.elsewhen (input === BitPat("b0000000??????????001????????????")) {
      output := 11.U // sll
    }.elsewhen (input === BitPat("b0000000??????????010????????????")) {
      output := 15.U // slt
    }.elsewhen (input === BitPat("b0100000??????????000????????????")) {
      output := 16.U // sub
    }.elsewhen (input === BitPat("b0000000??????????111????????????")) {
      output := 18.U // and
    }.elsewhen (input === BitPat("b0000000??????????100????????????")) {
      output := 17.U // xor
    }.elsewhen (input === BitPat("b0000000??????????110????????????")) {
      output := 12.U // or
    }.elsewhen (input === BitPat("b0100000??????????101????????????")) {
      output := 13.U // sra
    }.elsewhen (input === BitPat("b0000000??????????101????????????")) {
      output := 10.U // srl
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b0010011")) {
    when (input === BitPat("b011????????????")) {
      output := 36.U // sltiu
    }.elsewhen (input === BitPat("b001????????????")) {
      when (input === BitPat("b000000??????????????????????????")) {
        output := 35.U // slli
      }.otherwise {
        output := 0.U // invalid
      }
    }.elsewhen (input === BitPat("b101????????????")) {
      when (input === BitPat("b000000??????????????????????????")) {
        output := 32.U // srli
      }.elsewhen (input === BitPat("b010000??????????????????????????")) {
        output := 33.U // srai
      }.otherwise {
        output := 0.U // invalid
      }
    }.elsewhen (input === BitPat("b010????????????")) {
      output := 37.U // slti
    }.elsewhen (input === BitPat("b000????????????")) {
      output := 34.U // addi
    }.elsewhen (input === BitPat("b100????????????")) {
      output := 38.U // xori
    }.elsewhen (input === BitPat("b111????????????")) {
      output := 31.U // andi
    }.elsewhen (input === BitPat("b110????????????")) {
      output := 39.U // ori
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b1110011")) {
    when (input === BitPat("b0000000000010000000000000???????")) {
      output := 3.U // ebreak
    }.elsewhen (input === BitPat("b0000000000000000000000000???????")) {
      output := 2.U // ecall
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b1100111")) {
    when (input === BitPat("b000????????????")) {
      output := 51.U // jalr
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b0100011")) {
    when (input === BitPat("b000????????????")) {
      output := 30.U // sb
    }.elsewhen (input === BitPat("b011????????????")) {
      output := 27.U // sd
    }.elsewhen (input === BitPat("b001????????????")) {
      output := 28.U // sh
    }.elsewhen (input === BitPat("b010????????????")) {
      output := 29.U // sw
    }.otherwise {
      output := 0.U // invalid
    }
  }.elsewhen (input === BitPat("b0010111")) {
    output := 45.U // auipc
  }.otherwise {
    output := 0.U // invalid
  }
}
object Main extends App {
  println(
    ChiselStage.emitSystemVerilog(
      gen = new InstructionDecoder,
      firtoolOpts = Array("-disable-all-randomization", "-strip-debug-info")
    )
  )
}
