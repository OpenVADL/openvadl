//> using scala "2.13.12"
//> using dep "org.chipsalliance::chisel:6.6.0"
//> using plugin "org.chipsalliance:::chisel-plugin:6.6.0"
//> using options "-unchecked", "-deprecation", "-language:reflectiveCalls", "-feature", "-Xcheckinit", "-Xfatal-warnings", "-Ywarn-dead-code", "-Ywarn-unused", "-Ymacro-annotations"


import _root_.circt.stage.ChiselStage

import chisel3._
import chisel3.util.BitPat
import chisel3.util.experimental.decode._

class InstructionDecoder extends Module {
  val input = IO(Input(UInt(32.W)))
  val output = IO(Output(UInt(6.W)))

  val table = TruthTable(
    Map(
      BitPat("b?????????????????????????0110111") -> BitPat("b000001"),
      BitPat("b00000000000000000000000001110011") -> BitPat("b000010"),
      BitPat("b00000000000100000000000001110011") -> BitPat("b000011"),
      BitPat("b?????????????????000?????1100011") -> BitPat("b000100"),
      BitPat("b?????????????????111?????1100011") -> BitPat("b000101"),
      BitPat("b?????????????????001?????1100011") -> BitPat("b000110"),
      BitPat("b?????????????????101?????1100011") -> BitPat("b000111"),
      BitPat("b?????????????????100?????1100011") -> BitPat("b001000"),
      BitPat("b?????????????????110?????1100011") -> BitPat("b001001"),
      BitPat("b0000000??????????101?????0110011") -> BitPat("b001010"),
      BitPat("b0000000??????????001?????0110011") -> BitPat("b001011"),
      BitPat("b0000000??????????110?????0110011") -> BitPat("b001100"),
      BitPat("b0100000??????????101?????0110011") -> BitPat("b001101"),
      BitPat("b0000000??????????011?????0110011") -> BitPat("b001110"),
      BitPat("b0000000??????????010?????0110011") -> BitPat("b001111"),
      BitPat("b0100000??????????000?????0110011") -> BitPat("b010000"),
      BitPat("b0000000??????????100?????0110011") -> BitPat("b010001"),
      BitPat("b0000000??????????111?????0110011") -> BitPat("b010010"),
      BitPat("b0000000??????????000?????0110011") -> BitPat("b010011"),
      BitPat("b?????????????????010?????0000011") -> BitPat("b010100"),
      BitPat("b?????????????????000?????0000011") -> BitPat("b010101"),
      BitPat("b?????????????????011?????0000011") -> BitPat("b010110"),
      BitPat("b?????????????????100?????0000011") -> BitPat("b010111"),
      BitPat("b?????????????????110?????0000011") -> BitPat("b011000"),
      BitPat("b?????????????????101?????0000011") -> BitPat("b011001"),
      BitPat("b?????????????????001?????0000011") -> BitPat("b011010"),
      BitPat("b?????????????????011?????0100011") -> BitPat("b011011"),
      BitPat("b?????????????????001?????0100011") -> BitPat("b011100"),
      BitPat("b?????????????????010?????0100011") -> BitPat("b011101"),
      BitPat("b?????????????????000?????0100011") -> BitPat("b011110"),
      BitPat("b?????????????????111?????0010011") -> BitPat("b011111"),
      BitPat("b000000???????????101?????0010011") -> BitPat("b100000"),
      BitPat("b010000???????????101?????0010011") -> BitPat("b100001"),
      BitPat("b?????????????????000?????0010011") -> BitPat("b100010"),
      BitPat("b000000???????????001?????0010011") -> BitPat("b100011"),
      BitPat("b?????????????????011?????0010011") -> BitPat("b100100"),
      BitPat("b?????????????????010?????0010011") -> BitPat("b100101"),
      BitPat("b?????????????????100?????0010011") -> BitPat("b100110"),
      BitPat("b?????????????????110?????0010011") -> BitPat("b100111"),
      BitPat("b?????????????????000?????0011011") -> BitPat("b101000"),
      BitPat("b0000000??????????101?????0011011") -> BitPat("b101001"),
      BitPat("b0100000??????????101?????0011011") -> BitPat("b101010"),
      BitPat("b0000000??????????001?????0011011") -> BitPat("b101011"),
      BitPat("b?????????????????????????1101111") -> BitPat("b101100"),
      BitPat("b?????????????????????????0010111") -> BitPat("b101101"),
      BitPat("b0000000??????????001?????0111011") -> BitPat("b101110"),
      BitPat("b0100000??????????000?????0111011") -> BitPat("b101111"),
      BitPat("b0000000??????????101?????0111011") -> BitPat("b110000"),
      BitPat("b0000000??????????000?????0111011") -> BitPat("b110001"),
      BitPat("b0100000??????????101?????0111011") -> BitPat("b110010"),
      BitPat("b?????????????????000?????1100111") -> BitPat("b110011"),
    ),
    BitPat("b000000"))
  output := decoder(input, table)
}
object Main extends App {
  println(
    ChiselStage.emitSystemVerilog(
      gen = new InstructionDecoder,
      firtoolOpts = Array("-disable-all-randomization", "-strip-debug-info")
    )
  )
}



