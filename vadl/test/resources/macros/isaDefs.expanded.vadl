instruction set architecture IsaDefsTest = {
  register X: Bits<5> -> Bits<32>

  format Rtype: Bits<32> =
  { rd : Bits<5>
  , rs1 : Bits<5>
  , rs2 : Bits<5>
  , opcode : Bits<7>
  }

  using SIntR = SInt<32>

  instruction ADD : Rtype =   {
    X(rd) := (X(rs1) + X(rs2)) as SIntR
  }


  encoding ADD =
  { opcode = 0b011'0011
  }

  assembly ADD = (mnemonic, " ", register(rd), ",", register(rs1), ",", register(rs2))

  instruction SUB : Rtype =   {
    X(rd) := (X(rs1) - X(rs2)) as SIntR
  }


  encoding SUB =
  { opcode = 0b100'1100
  }

  assembly SUB = (mnemonic, " ", register(rd), ",", register(rs1), ",", register(rs2))

  instruction SQU : Rtype =   {
    X(rd) := (X(rs1) * X(rs1)) as SIntR
  }


  encoding SQU =
  { opcode = 0b101'0101
  }

  assembly SQU = (mnemonic, " ", register(rd), ",", register(rs1), ",", register(rs1))
}
