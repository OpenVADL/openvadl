
instruction set architecture ValidRegFileWrites = {

  register X: Bits<8> -> Bits<32>

  instruction TEST1: TMP = {
    if F1 = 1 then {
      X(1) := 1

      if F1 = 1 then {
      } else {
        X(1) := 2
      }
    }
  }

  // different write locations
  instruction TEST2: TMP = {
    X(1) := 2
    X(2) := 3
  }

  // different same write values
  instruction TEST3: TMP = {
    X(F1 + F2) := 2
    X(F1 + F2) := 2
  }

  encoding TEST1 = { ENC = 1 }
  encoding TEST2 = { ENC = 1 }
  encoding TEST3 = { ENC = 1 }
  assembly TEST1, TEST2, TEST3 = ""

  format TMP: Bits<32> =
  { F1: Bits<8>
  , F2: Bits<8>
  , F3: Bits<8>
  , ENC: Bits<8>
  }
}

processor TEST implements ValidRegFileWrites = { }