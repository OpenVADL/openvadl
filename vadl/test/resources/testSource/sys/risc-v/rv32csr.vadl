// SPDX-FileCopyrightText : Â© 2024 TU Wien <vadl@tuwien.ac.at>
// SPDX-License-Identifier: Apache-2.0

// RISC-V 32 IM Zicsr instruction set

import rv3264im::RV3264IM

instruction set architecture RV32IM extending RV3264IM = {}

instruction set architecture RV32Zicsr extending RV32IM = {

  enumeration CsrDef : Bits<12> = // defined control and status register indices
    { ustatus  =   0 // 0x000  User mode restricted view of mstatus
    , uie      =   4 // 0x004  User mode Interrupt Enable
    , utvec    =   5 // 0x005  User mode Trap VECtor base address
    , uscratch =  64 // 0x040  User mode SCRATCH
    , uepc     =  65 // 0x041  User mode Exception Program Counter
    , ucause   =  66 // 0x042  User mode exception CAUSE
    , utval    =  67 // 0x043  User mode Trap VALue
    , uip      =  68 // 0x044  User mode Interrupt Pending
    , mstatus  = 768 // 0x300  Machine STATUS
    , misa     = 769 // 0x301  Machine ISA
    , mie      = 772 // 0x304  Machine Interrupt Enable register
    , mtvec    = 773 // 0x305  Machine Trap VECtor base address
    , mtvt     = 775 // 0x307  Machine Trap Vector Table base address
    , mscratch = 832 // 0x340  Machine SCRATCH
    , mepc     = 833 // 0x341  Machine Exception Program Counter
    , mcause   = 834 // 0x342  Machine exception CAUSE
    , mtval    = 835 // 0x343  Machine Trap VALue
    , mip      = 836 // 0x344  Machine Interrupt Pending
    }

  enumeration CsrImpl : Bits<12> =  // implemented control and status register indices
    { ustatus        // 0x000  User mode restricted view of mstatus
    , uie            // 0x004  User mode Interrupt Enable
    , utvec          // 0x005  User mode Trap VECtor base address
    , uscratch       // 0x040  User mode SCRATCH
    , uepc           // 0x041  User mode Exception Program Counter
    , ucause         // 0x042  User mode exception CAUSE
    , utval          // 0x043  User mode Trap VALue
    , uip            // 0x044  User mode Interrupt Pending
    , mstatus        // 0x300  Machine STATUS
    , misa           // 0x301  Machine ISA
    , mie            // 0x304  Machine Interrupt Enable register
    , mtvec          // 0x305  Machine Trap VECtor base address
    , mtvt           // 0x307  Machine Trap Vector Table base address
    , mscratch       // 0x340  Machine SCRATCH
    , mepc           // 0x341  Machine Exception Program Counter
    , mcause         // 0x342  Machine exception CAUSE
    , mtval          // 0x343  Machine Trap VALue
    , mip            // 0x344  Machine Interrupt Pending
    , ImplLength     // count of implemented registers
    }

  function CsrDefToImpl (csr : Bits<12>) -> Bits<12> = // map defined to index to implemented index
    match csr with
      { CsrDef::ustatus  => CsrImpl::ustatus        // 0x000  User mode restricted view of mstatus
      , CsrDef::uie      => CsrImpl::uie            // 0x004  User mode Interrupt Enable
      , CsrDef::utvec    => CsrImpl::utvec          // 0x005  User mode Trap VECtor base address
      , CsrDef::uscratch => CsrImpl::uscratch       // 0x040  User mode SCRATCH
      , CsrDef::uepc     => CsrImpl::uepc           // 0x041  User mode Exception Program Counter
      , CsrDef::ucause   => CsrImpl::ucause         // 0x042  User mode exception CAUSE
      , CsrDef::utval    => CsrImpl::utval          // 0x043  User mode Trap VALue
      , CsrDef::uip      => CsrImpl::uip            // 0x044  User mode Interrupt Pending
      , CsrDef::mstatus  => CsrImpl::mstatus        // 0x300  Machine STATUS
      , CsrDef::misa     => CsrImpl::misa           // 0x301  Machine ISA
      , CsrDef::mie      => CsrImpl::mie            // 0x304  Machine Interrupt Enable register
      , CsrDef::mtvec    => CsrImpl::mtvec          // 0x305  Machine Trap VECtor base address
      , CsrDef::mtvt     => CsrImpl::mtvt           // 0x307  Machine Trap Vector Table base address
      , CsrDef::mscratch => CsrImpl::mscratch       // 0x340  Machine SCRATCH
      , CsrDef::mepc     => CsrImpl::mepc           // 0x341  Machine Exception Program Counter
      , CsrDef::mcause   => CsrImpl::mcause         // 0x342  Machine exception CAUSE
      , CsrDef::mtval    => CsrImpl::mtval          // 0x343  Machine Trap VALue
      , CsrDef::mip      => CsrImpl::mip            // 0x344  Machine Interrupt Pending
      , _                => -1 as Bits<12>
      }

  function CsrString(index : Bits<12>) -> String = 
    match index with
      { CsrDef::ustatus  => "ustatus"        // User mode restricted view of mstatus
      , CsrDef::uie      => "uie"            // User mode Interrupt Enable
      , CsrDef::utvec    => "utvec"          // User mode Trap VECtor base address
      , CsrDef::uscratch => "uscratch"       // User mode SCRATCH
      , CsrDef::uepc     => "uepc"           // User mode Exception Program Counter
      , CsrDef::ucause   => "ucause"         // User mode exception CAUSE
      , CsrDef::utval    => "utval"          // User mode Trap VALue
      , CsrDef::uip      => "uip"            // User mode Interrupt Pending
      , CsrDef::mstatus  => "mstatus"        // Machine STATUS
      , CsrDef::misa     => "misa"           // Machine ISA
      , CsrDef::mie      => "mie"            // Machine Interrupt Enable register
      , CsrDef::mtvec    => "mtvec"          // Machine Trap VECtor base address
      , CsrDef::mtvt     => "mtvt"           // Machine Trap Vector Table base address
      , CsrDef::mscratch => "mscratch"       // Machine SCRATCH
      , CsrDef::mepc     => "mepc"           // Machine Exception Program Counter
      , CsrDef::mcause   => "mcause"         // Machine exception CAUSE
      , CsrDef::mtval    => "mtval"          // Machine Trap VALue
      , CsrDef::mip      => "mip"            // Machine Interrupt Pending
      , _                => hex( index )   
      }

  register CSR : Bits<CsrImpl::ImplLength><MLen>

  exception IllegalInstruction = {}

  instruction CSRRW : Itype =            // atomic CSR Read / Write
    let csridx = CsrDefToImpl(imm) in
      if csridx = -1 as Bits<12> then
        raise IllegalInstruction
      else
        let xrs1 = X(rs1) in {
          if rd != 0 then
            X(rd)     := CSR(csridx)
          CSR(csridx) := xrs1
        }
  encoding CSRRW = { opcode = 0b111'0011, funct3 = 0b001 }
  assembly CSRRW = (mnemonic, ' ', register(rd), ',', CsrString(imm), ',', register(rs1))

  instruction CSRRS : Itype =           // atomic CSR Read and Set bits
    let csridx = CsrDefToImpl(imm) in
      if csridx = -1 as Bits<12> then
        raise IllegalInstruction
      else
        let csr_csridx = CSR(csridx) in {
          if rs1 != 0 then
            CSR(csridx) := csr_csridx | X(rs1)
          X(rd)         := csr_csridx
      }
  encoding CSRRS = { opcode = 0b111'0011, funct3 = 0b010 }
  assembly CSRRS = (mnemonic, ' ', register(rd), ',', CsrString(imm), ',', register(rs1))
  }
