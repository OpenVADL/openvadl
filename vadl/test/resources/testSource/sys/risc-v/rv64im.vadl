// SPDX-FileCopyrightText : Â© 2024 TU Wien <vadl@tuwien.ac.at>
// SPDX-License-Identifier: Apache-2.0

// RISC-V 32 I instruction set

import rv3264im::RV3264IM with ("ArchSize=Arch64")

instruction set architecture RV64IM extending RV3264IM = {}

application binary interface ABI for RV64IM = {
   long width = 64
   long align = 64
   size_t type = unsigned long
   int max type = signed long
   pointer width = 64
   pointer align = 64

   //
   // Register alias definitions
   //

   alias register zero = X(0)

   alias register ra = X(1)

   alias register sp = X(2)

   alias register gp = X(3)
   alias register tp = X(4)

   alias register t0 = X(5)
   alias register t1 = X(6)
   alias register t2 = X(7)

   // [ preferred alias ]
   alias register fp = X(8)

   alias register s0 = X(8)
   alias register s1 = X(9)

   alias register a0 = X(10)
   alias register a1 = X(11)
   alias register a2 = X(12)
   alias register a3 = X(13)
   alias register a4 = X(14)
   alias register a5 = X(15)
   alias register a6 = X(16)
   alias register a7 = X(17)

   alias register s2 = X(18)
   alias register s3 = X(19)
   alias register s4 = X(20)
   alias register s5 = X(21)
   alias register s6 = X(22)
   alias register s7 = X(23)
   alias register s8 = X(24)
   alias register s9 = X(25)
   alias register s10 = X(26)
   alias register s11 = X(27)

   alias register t3 = X(28)
   alias register t4 = X(29)
   alias register t5 = X(30)
   alias register t6 = X(31)

   // [ alignment : HalfWord ]
   stack pointer = sp
   return address = ra
   global pointer = gp
   frame pointer = fp
   thread pointer = tp

   pseudo return instruction = RET
   pseudo call instruction = CALL
   pseudo local address load instruction = LLA
   pseudo global address load instruction = LGA_64
   pseudo absolute address load instruction = LA

   return value = a{0..1}
   function argument = a{0..1}

   // ra is callee saved because it is used as normal register and has to be restored.
   caller saved = [ a{0..7}, t{0..6} ]
   callee saved = [ ra, gp, tp, fp, s{0..11} ]

   constant sequence( rd : Bits<5>, val : SInt<32> ) =
   {
      LUI { rd = rd, imm = hi( val ) }
      ADDI { rd = rd, rs1 = rd, imm = lo( val ) }
   }

   constant sequence( rd : Bits<5>, val : UInt<32> ) =
   {
      LUI { rd = rd, imm = hi( val ) }
      ADDI { rd = rd, rs1 = rd, imm = lo( val ) }
   }

   constant sequence( rd : Bits<5>, imm : SInt<12> ) =
   {
      ADDI{ rd = rd, rs1 = 0, imm = imm }
   }

   register adjustment sequence( rd : Bits<5>, rs1: Bits<5>, imm : SInt<12> ) =
   {
      ADDI{ rd = rd, rs1 = rs1, imm = imm }
   }
}

processor Spike implements RV64IM with ABI = {
  constant reset_vec_addr = 0x1000

  reset = {
    PC := reset_vec_addr
  }

  [ firmware ]
  [ base: 0x80000000 ]
  memory region [RAM] DRAM in MEM

  memory region [ROM] MROM in MEM = {
      MEM<4>(0x1000) := 0x00000297  // auipc t0, 0x0
      MEM<4>(0x1004) := 0x02828613  // addi a2, t0, 40
      // this processor has no zicsr extension
      MEM<4>(0x1008) := 0x00000013  // addi x0, x0, 0
      MEM<4>(0x100c) := 0x0202b583  // ld   a1, 32(t0)
      MEM<4>(0x1010) := 0x0182b283  // ld   t0, 24(t0)
      MEM<4>(0x1014) := 0x00028067  // jr   t0
      // store start_addr in memory (0x80000000)
      MEM<4>(0x1018) := 0x80000000  // lo32(start_addr)
      MEM<4>(0x101c) := 0x00000000  // hi32(start_addr)
      // we do not yet support a fdt, but we set the address,
      // to keep the registers consistent with upstream
      MEM<4>(0x1020) := 0x87e00000  // lo32(fdt_addr)
      MEM<4>(0x1024) := 0x00000000  // hi32(fdt_addr)
  }
}