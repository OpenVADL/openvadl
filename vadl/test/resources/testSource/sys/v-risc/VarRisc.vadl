// SPDX-FileCopyrightText : Â© 2025 TU Wien <vadl@tuwien.ac.at>
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* VarRISC32 is an educational 32 bit RISC architecture with a variable length
 * instruction encoding. Three different instruction word sizes are available:
 * 16, 32 and 48 bit. This enables to support the usage of 32 bit immediate
 * values in an instruction. Instruction names have the suffix "_S" or "_L" to
 * distinguish 16 ("_S") and 48 bit ("_L") from 32 bit instructions. Short
 * instructions are available only as instructions with 2 operands, one source
 * operand is identical to the destination operand. Word instructions always
 * have 3 operands, long instructions can have 2 or 3 operands. 
 * VarRISC32 is a simple load/store architecture similar to RISC-V 32IM, but
 * supports longer immediate values. All integer operations which are necessary
 * for compiler generation are available.
 */

instruction set architecture VarRISC32 = {

  model Init () : Id = {none}            // if none, encoding uses 15 bit otherwise 17 bit
  model InitScale () : Encs = {match : Encs ($Init() = none => none ; _ => scale = 0)}

  constant Size      = 32                // register size
  constant LinkIdx   = 31                // index of link register

  using Regs         = Bits<Size>        // type for integer register 
  using SIntR        = SInt<Size>        // register sized signed integer
  using UIntR        = UInt<Size>        // register sized unsigned integer
  using UIntM        = UInt<5>           // type for masking shift amounts
  using Addr         = Regs              // address is same type as register
  using Byte         = Bits<8>           // 8 bit bytes
  using Index        = Bits<5>           // index type for 32 registers
  using OpCode       = Bits<6>           // 6 bit opcode type for 64 base opcode space

  program counter PC : Addr              // program counter has address type

  [zero: R(0) ]
  register R : Index -> Regs             // 32 register sized integer registers

  memory MEM : Addr -> Byte              // byte addressed memory

  format TYPE_S : Bits<16> =
    { rs1imm  : Index                    // source register index rs1 or 5 bit immediate
    , rd      : Index                    // destination register index rd
    , opcode  : OpCode                   // operation code
    , rs1     = rs1imm                   // source register index rs1
    , imm     = rs1imm                   // 5 bit immediate
    , immS    = rs1imm as SIntR          // 32 bit   signed immediate value
    , immU    = rs1imm as UIntR          // 32 bit unsigned immediate value
    }

  format TYPE_B : Bits<16> =
    { offset  : Bits<10>                 // shifted branch offset
    , opcode  : OpCode                   // operation code
    , offsetS = offset as SIntR << 1     // sign extended and shifted branch offset
    }

  format TYPE_L : Bits<48> =
    { imm     : SInt<32>                 // 32 bit immediate value
    , func5   : Index                    // source register index rs1 or 5 bit function code
    , rd      : Index                    // destination register index rd
    , opcode  : OpCode                   // operation code
    , rs1     = func5                    // source register index rs1
    , immS    = imm as SIntR             // 32 bit   signed immediate value
    , immU    = imm as UIntR             // 32 bit unsigned immediate value
    , offsetS = imm as SIntR << 1        // sign extended and shifted branch offset
    }

  format TYPE_I : Bits<32> =
    { rd      : Index                    // destination register index rd
    , rs1     : Index                    // source register index rs1
    , imm     : Bits<11>                 // 11 bit immediate value
    , func5   : Bits<5>                  // 5 bit function code
    , opcode  : OpCode                   // operation code
    , immS    = imm as SIntR             // 32 bit   signed immediate value
    , immU    = imm as UIntR             // 32 bit unsigned immediate value
    , offsetS = imm as SIntR << 1        // sign extended and shifted branch offset
    }

  format TYPE_R : Bits<32> =
    { rd      : Index                    // destination register index rd
    , rs1     : Index                    // source register index rs1
    , rs2     : Index                    // source register index rs2
    , scale   : Bits<2>                  // scaling factor (currently unused)
    , func9   : Bits<9>                  // 9 bit function code
    , opcode  : OpCode                   // operation code
    }

  format TYPE_C : Bits<32> =
    { rd      : Index                    // destination register index rd
    , imm     : Bits<16>                 // 16 bit offset
    , func5   : Bits<5>                  // 5 bit function code
    , opcode  : OpCode                   // operation code
    , offsetS = imm as SIntR << 1        // call offset
    }

  model ShortRegInstr (name : Id, op : BinOp, ltype: Id, rtype: Id, code : Val) : IsaDefs = {
    instruction $name : TYPE_S =
      let res = R(rd) as $ltype $op R(rs1) as $rtype in
          R(rd) := res as Regs
    encoding $name = { opcode = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', register(rs1) )
  }

  model ShortImmInstr (name : Id, op : BinOp, ltype: Id, rtype: Id, code : Val) : IsaDefs = {
    instruction $name : TYPE_S =
      let res = R(rd) as $ltype $op imm as $rtype in
        R(rd) := res as Regs
    encoding $name = { opcode = $code + CodeOff}
    assembly $name = ( mnemonic, ' ', register(rd), ',', decimal(imm) )
  }

  model RegInstr (name : Id, op : BinOp, ltype: Id, rtype: Id, code : Val) : IsaDefs = {
    instruction $name : TYPE_R =
      let res = R(rs1) as $ltype $op R(rs2) as $rtype in
        R(rd) := res as Regs
    encoding $name = { opcode = RegCode, $InitScale(), func9 = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', register(rs1), ',', register(rs2) )
  }

  model ImmInstr (name : Id, op : BinOp, ltype: Id, rtype: Id, code : Val) : IsaDefs = {
    instruction $name : TYPE_I =
      let res = R(rs1) as $ltype $op imm as $rtype in
        R(rd) := res as Regs
    encoding $name = { opcode = ImmCode, func5 = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', register(rs1), ',', decimal(imm) )
  }

  model SysCallInstr (name : Id, code : Val) : IsaDefs = {
    instruction $name : TYPE_I = {}
    encoding $name = { opcode = MemCode, func5 = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', register(rs1), ',', decimal(imm) )
  }

  model ComputeInstruction ( name : Id, op : BinOp, ltype: Id, rtype: Id, code : Val ) : IsaDefs = {
    $ShortRegInstr (AsId ( $name, '_S' ) ; $op ; $ltype ; $rtype ; $code )
    $ShortImmInstr (AsId ( $name, 'I_S') ; $op ; $ltype ; $rtype ; $code )
    $RegInstr      (           $name         ; $op ; $ltype ; $rtype ; $code )
    $ImmInstr      (AsId ( $name, 'I'  ) ; $op ; $ltype ; $rtype ; $code )
  }

  model LongImmInstruction (name : Id, op : BinOp, ltype: Id, rtype: Id, code : Val) : IsaDefs = {
    instruction AsId ( $name, 'I_L') : TYPE_L =
        let res = R(rs1) as $ltype $op imm in
            R(rd) := res as Regs
    encoding AsId ( $name, 'I_L') = { opcode = ImmLOff + $code }
    assembly AsId ( $name, 'I_L') = ( mnemonic, ' ', register(rd), ',', register(rs1), ',', decimal(imm) )
    $ComputeInstruction ( $name; $op; $ltype; $rtype; $code )
  }

  model MoveInstruction (name : Id, code : Val) : IsaDefs = {
    instruction $name : TYPE_S =
      R(rd) := R(rs1)
    encoding $name = { opcode = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ':=', register(rs1))
  }

  model BranchSInstruction ( name : Id, code : Val ) : IsaDefs = {
    instruction AsId ( $name, '_S' ) : TYPE_B =
      PC := PC + offsetS
    encoding AsId ( $name, '_S' ) = { opcode = $code }
    assembly AsId ( $name, '_S' ) = ( mnemonic, ' ', decimal (offset) )
  }

  model JumpLinkInstruction ( name : Id, code : Val ) : IsaDefs = {
    instruction $name : TYPE_S =
      let retaddr = PC.next in {
        PC := R(rd)
        R(rs1) := retaddr         
      }
    encoding $name = { opcode = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', register(rs1) )
  }

  model MemoryInstruction ( name : Id, memstmt : Stat, code : Val) : IsaDefs = {
    instruction $name : TYPE_I =
      let a = R(rs1) + immU in $memstmt
    encoding $name = { opcode = MemCode, func5 = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', decimal(imm), '(', register(rs1), ')' )

    instruction AsId ( $name, '_L') : TYPE_L =
      let a = R(rs1) + immU in $memstmt
    encoding AsId ( $name, '_L') = { opcode = MemLOff + $code }
    assembly AsId ( $name, '_L') = ( mnemonic, ' ', register(rd), ',', decimal(imm), '(', register(rs1), ')' )
  }

  model ShortMemInstruction ( name : Id, memstmt : Stat, code : Val ) : IsaDefs = {
    instruction AsId ( $name, '_S') : TYPE_S =
      let a = R(rs1) in $memstmt
    encoding AsId ( $name, '_S') = { opcode = MemSOff + $code }
    assembly AsId ( $name, '_S') = ( mnemonic, ' ', register(rd), ',(', register(rs1), ')' )
    $MemoryInstruction ( $name; $memstmt; $code )
  }

  model BranchInstruction ( name : Id, op : BinOp, reltype: Id, code : Val) : IsaDefs = {
    instruction $name : TYPE_I =
      if R(rd) as $reltype $op R(rs1) then
        PC := PC + offsetS
    encoding $name = { opcode = MemCode, func5 = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', register(rs1), ',', decimal(imm) )

    instruction AsId ( $name, '_L') : TYPE_L = {
      if R(rd) as $reltype $op R(rs1) then
        PC := PC + offsetS
    }
    encoding AsId ( $name, '_L') = { opcode = BraLOff + $code }
    assembly AsId ( $name, '_L') = ( mnemonic, ' ', register(rd), ',', register(rs1), ',', decimal(imm) )
  }

  model CondImmInstruction ( name : Id, op : BinOp, reltype: Id, imm: Id, code : Val ) : IsaDefs = {
    instruction AsId ( $name, 'I') : TYPE_I =
      R(rd) :=  ( R(rs1) as $reltype $op $imm ) as Regs
    encoding AsId ( $name, 'I') = { opcode = ImmCode, func5 = $code }
    assembly AsId ( $name, 'I') = ( mnemonic, ' ', register(rd), ',', register(rs1), ',', decimal(imm) )

    instruction AsId ( $name, 'I_L') : TYPE_L =
      R(rd) :=  ( R(rd) as $reltype $op $imm ) as Regs
    encoding AsId ( $name, 'I_L') = { opcode = CodeI_L, func5 = $code }
    assembly AsId ( $name, 'I_L') = ( mnemonic, ' ', register(rd), ',', decimal(imm))
  }

  model CondInstruction ( name : Id, op : BinOp, reltype: Id, imm: Id, code : Val ) : IsaDefs = {
    instruction $name : TYPE_R =
      R(rd) := ( R(rs1) as $reltype $op R(rs2)) as Regs
    encoding $name = { opcode = RegCode, $InitScale(), func9 = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', register(rs1), ',', register(rs2) )

    $CondImmInstruction ($name ; $op ; $reltype ; $imm ; $code )
  }

  model CallInstruction( name : Id, code : Val ) : IsaDefs = {
    instruction $name : TYPE_C = {
      R(rd) := PC.next
      PC := PC + offsetS
      }
    encoding $name = { opcode = ImmCode, func5 = $code }
    assembly $name = ( mnemonic, ' ', register(rd), ',', decimal(imm))

    instruction AsId ( $name, '_L' ) : TYPE_L = {
        R(rd) := PC.next
        PC := PC + offsetS
        }
    encoding AsId ( $name, '_L') = { opcode = CodeI_L, func5 = $code }
    assembly AsId ( $name, '_L') = ( mnemonic, ' ', register(rd), ',', decimal(imm))
  }

/* instruction encoding and opcode space of opcode and func5/func9
TYPE_S opcode              0      1      2      3      4      5      6      7      8      9     10
                         ADD_S  SUB_S  MUL_S  DIV_S  REM_S  AND_S   OR_S  XOR_S  ASR_S  LRS_S  LSL_S 
TYPE_S opcode             11     12     13     14     15     16     17     18     19     20     21
                        ADDI_S SUBI_S MULI_S DIVI_S REMI_S ANDI_S  ORI_S XORI_S ASRI_S LSRI_S LSLI_S
TYPE_S opcode             22     23     24     25
                         MOV    BRA_S  JAL    ---
TYPE_S opcode             26     27     28     29     30     31
                         LDB_S  LDH_S  LDW_S  STB_S  STH_S  STW_S
TYPE_L opcode             32     33     34     35     36     37     38     39     res   res   res    res  res    res
                         LDB_L  LDH_L  LDW_L  STB_L  STH_L  STW_L  LBU_L  LHU_L  Long Double Float  Long Double Float
TYPE_L opcode             46     47     48     49     50     51   
                         BEQ_L  BNE_L  BLT_L  BLE_L BULT_L BULE_L
TYPE_L opcode             52     53     54     55     56     57     58     59
                        ADDI_L SUBI_L MULI_L DIVI_L REMI_L ANDI_L  ORI_L XORI_L
TYPE_L opcode 60 func5    16     17     18     19     20     21     22     23     24     25             31
       compare          SEQI_L SNEI_L SLTI_L SLEI_L ULTI_L ULEI_L SGTI_L SGEI_L UGTI_L UGEI_L         BAL_L
TYPE_I opcode 61 func5     0      1      2      3      4      5      6      7      8      9     10
      memory              LDB    LDH    LDW    STB    STH    STW    LBU    LHU
TYPE_C opcode 61 func5    16     17     18     19     20     21                                         31
      branch              BEQ    BNE    BLT    BLE   BULT   BULE                                       SYS
TYPE_I opcode 62 func5     0      1      2      3      4      5      6      7      8      9     10
      compute            ADDI   SUBI   MULI   DIVI   REMI   ANDI    ORI   XORI   ASRI   LSRI   LSLI
                          16     17     18     19     20     21     22     23     24     25             31
      compare            SEQI   SNEI   SLTI   SLEI   ULTI   ULEI   SGTI   SGEI   UGTI   UGEI           BAL
TYPE_R opcode 63 func9     0      1      2      3      4      5      6      7      8      9     10
      compute             ADD    SUB    MUL    DIV    REM    AND     OR    XOR    ASR    LSR    LSL
TYPE_R opcode 63 func9    16     17     18     19     20     21     22     23     24     25
      compare             SEQ    SNE    SLT    SLE    ULT    ULE    ---    ---    ---    ---
*/

  constant RegCode = 63 // opcode for Type_R  register operand instructions
  constant ImmCode = 62 // opcode for Type_I immediate operand instructions
  constant MemCode = 61 // opcode for Type_I memory and branch instructions
  constant CodeI_L = 60 // opcode for Type_L immediate operand instructions
  constant ImmLOff = 52 // opcode offset for long immediate instructions
  constant MemLOff = 32 // opcode offset for long memory instructions
  constant BraLOff = 30 // opcode offset for long branch instructions
  constant MemSOff = 26 // opcode offset for short memory instructions
  constant CodeOff = 11 // opcode offset for short immediate instructions

  $LongImmInstruction ( ADD  ;  + ; SIntR ; SIntR ;  0 )          // add
  $LongImmInstruction ( SUB  ;  - ; SIntR ; SIntR ;  1 )          // subtract
  $LongImmInstruction ( MUL  ;  * ; SIntR ; SIntR ;  2 )          // multiply
  $LongImmInstruction ( DIV  ;  / ; SIntR ; SIntR ;  3 )          // divide
  $LongImmInstruction ( REM  ;  % ; SIntR ; SIntR ;  4 )          // remainder
  $LongImmInstruction ( AND  ;  & ; SIntR ; SIntR ;  5 )          // and
  $LongImmInstruction (  OR  ;  | ; SIntR ; SIntR ;  6 )          // or
  $LongImmInstruction ( XOR  ;  ^ ; SIntR ; SIntR ;  7 )          // exclusive or
  $ComputeInstruction ( ASR  ; >> ; SIntR ; UIntM ;  8 )          // arithmetic shift right
  $ComputeInstruction ( LSR  ; >> ; UIntR ; UIntM ;  9 )          // logical shift right
  $ComputeInstruction ( LSL  ; << ; UIntR ; UIntM ; 10 )          // logical shift left
  $MoveInstruction    ( MOV  ;                      22 )          // move
  $BranchSInstruction ( BRA  ;                      23 )          // branch (short)
  $JumpLinkInstruction( JAL  ;                      24 )          // jump register and link
  // Unused                                         25 )
  $ShortMemInstruction( LDB  ; R(rd) := MEM   (a) as SIntR ; 0 )  // load byte signed
  $ShortMemInstruction( LDH  ; R(rd) := MEM<2>(a) as SIntR ; 1 )  // load half word signed
  $ShortMemInstruction( LDW  ; R(rd) := MEM<4>(a) as SIntR ; 2 )  // load word signed
  $ShortMemInstruction( STB  ; MEM   (a) := R(rd)( 7..0)   ; 3 )  // store byte
  $ShortMemInstruction( STH  ; MEM<2>(a) := R(rd)(15..0)   ; 4 )  // store half word
  $ShortMemInstruction( STW  ; MEM<4>(a) := R(rd)          ; 5 )  // store word
  $MemoryInstruction(   LBU  ; R(rd) := MEM   (a) as UIntR ; 6 )  // load byte unsigned
  $MemoryInstruction(   LHU  ; R(rd) := MEM<2>(a) as UIntR ; 7 )  // load half word unsigned
  // Memory Long, Float, Double                       40 .. 45 )  // reserved for floating point
  $BranchInstruction  ( BEQ  ;  = ;  SInt ;         16 )          // branch equal
  $BranchInstruction  ( BNE  ; != ;  SInt ;         17 )          // branch not equal
  $BranchInstruction  ( BLT  ;  < ;  SInt ;         18 )          // branch less than
  $BranchInstruction  ( BLE  ; <= ;  SInt ;         19 )          // branch less or equal
  $BranchInstruction  ( BULT ;  < ;  UInt ;         20 )          // branch unsigned less than
  $BranchInstruction  ( BULE ; <= ;  UInt ;         21 )          // branch unsigned less or equal
  $CallInstruction    ( BAL  ;                      31 )          // branch and link
  $SysCallInstr       ( SYS  ;                      31 )          // system call
  $CondInstruction    ( SEQ  ;  = ;  SInt ;  immS ; 16 )          // set equal
  $CondInstruction    ( SNE  ; != ;  SInt ;  immS ; 17 )          // set not equal
  $CondInstruction    ( SLT  ;  < ;  SInt ;  immS ; 18 )          // set less than
  $CondInstruction    ( SLE  ; <= ;  SInt ;  immS ; 19 )          // set less or equal
  $CondInstruction    ( ULT  ;  < ;  UInt ;  immU ; 20 )          // set unsigned less than
  $CondInstruction    ( ULE  ; <= ;  UInt ;  immU ; 21 )          // set unsigned less or equal
  $CondImmInstruction ( SGT  ;  > ;  SInt ;  immS ; 22 )          // set greater than immediate
  $CondImmInstruction ( SGE  ; >= ;  SInt ;  immS ; 23 )          // set greater or equal immediate
  $CondImmInstruction ( UGT  ;  > ;  UInt ;  immU ; 24 )          // set unsigned greater than immediate
  $CondImmInstruction ( UGE  ; >= ;  UInt ;  immU ; 25 )          // set unsigned greater or equal immediate

  // TYPE_L immediate instructions (compute, compare)  CodeI_L 60 )
  // TYPE_I immediate instructions (memory, branch)    MemCode 61 )
  // TYPE_I immediate instructions (compute, compare)  ImmCode 62 )
  // TYPE_R three operand instructions                 RegCode 63 )

}

processor Test implements VarRISC32 = { }