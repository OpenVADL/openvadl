
instruction set architecture Test = {
  using Regs = Bits<32>

  register B: HELPER
  [ read full ]
  register C: HELPER

  register file D: Regs -> Regs

  // full read
  instruction FIRST: HELPER = A := B

  // partial read
  instruction SECOND: HELPER = A := B.ONE

  // partial read on full access
  instruction THIRD: HELPER = A := C.ONE

  // register file read
  instruction FOURTH: HELPER = A := D(B.ONE)


  // Not so important definitions
  register A: Regs

  encoding FIRST = { ONE = 2 }
  encoding SECOND = { ONE = 2 }
  encoding THIRD = { ONE = 2 }
  encoding FOURTH = { ONE = 2 }
  assembly FIRST, SECOND, THIRD, FOURTH = "just a dummy"

  format HELPER: Regs =
  { ONE: Regs
  }

}

processor TEST implements Test = { }